{% set name = "trio-asyncio" %}
{% set version = "0.13.0" %}
{% set build_num = 4 %}


package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/t/trio_asyncio/trio_asyncio-{{ version }}.tar.gz
  sha256: 7ca24b21a1b17acde65752d6933886ba24284e52f4b2b0defe4ea8ed8a634a62

build:
  noarch: python
  number: {{ build_num }}
  script: {{ PYTHON }} -m pip install . -vv

requirements:
  host:
    - python >=3.7
    - pytest-runner
    - pip
  run:
    - python >=3.7
    - trio >=0.15.0
    - attrs
    - outcome

test:
  imports:
    - trio_asyncio

outputs:
  - name: trio-asyncio
  - name: trio_asyncio
    build:
      noarch: python
    requirements:
      host:
        - python
      run:
        - python
        - trio-asyncio ={{ version }}=*_{{ build_num }}
    test:
      imports:
        - trio_asyncio


about:
  home: https://github.com/python-trio/trio-asyncio
  license: MIT AND Apache-2.0
  license_file:
    - LICENSE
    - LICENSE.APACHE2
    - LICENSE.MIT
  summary: A re-implementation of the asyncio mainloop on top of Trio
  description: |
    Trio has native concepts of tasks and task cancellation. Asyncio is based on
    callbacks and chaining Futures, albeit with nicer syntax, which make handling
    of failures and timeouts fundamentally less reliable, esp. in larger programs.
    Thus, you really want to base your async project on Trio. On the other hand,
    there are quite a few asyncio-enhanced libraries. You really don't want to
    re-invent any wheels in your project. Thus, being able to use asyncio
    libraries from Trio is useful. Trio-Asyncio enables you to do that, and more.
  doc_url: http://trio-asyncio.readthedocs.io/
  dev_url: https://github.com/python-trio/trio-asyncio

extra:
  recipe-maintainers:
    - scopatz
    - dhirschfeld
